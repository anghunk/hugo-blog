<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网站 on 子舒的博客</title>
    <link>https://zishu.me/tags/%E7%BD%91%E7%AB%99/</link>
    <description>Recent content in 网站 on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/%E7%BD%91%E7%AB%99/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用原生 js 给网站写个搜索功能</title>
      <link>https://zishu.me/blog/189.html/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/189.html/</guid>
      <description>本文也算是一篇教程，可以给 hugo 网站加个搜索功能，并且实现热更新，体验感更好。 如果是其他程序，只需要按照特定的模板生成以下格式的文件即可，主要代码从 第 2 部分 开始，第一章节写的是如何用 hugo 输出文章列表 json 文件。 title 是文章标题，permalink 是文章链接。 [{ &amp;#34;permalink&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;&amp;#34; }, { &amp;#34;permalink&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;&amp;#34; }] 1. hugo 模板生成文章列表 json 文件 在 layouts 文件夹下新建 index.json 文件，模板内容如下： 其中第 2 行最后面的 &amp;quot;blog&amp;quot; 是你文章文件夹的名称。大部分是 posts 等等，这里是我个人的名称。 {{- $.Scratch.Set &amp;#34;posts&amp;#34; slice -}} {{- range where .Site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;blog&amp;#34; -}} {{- $.Scratch.Add &amp;#34;posts&amp;#34; (dict &amp;#34;title&amp;#34; .Title &amp;#34;permalink&amp;#34; .Permalink) -}} {{- end -}} {{- $.Scratch.Get &amp;#34;posts&amp;#34; | jsonify -}} 按照这个模板，hugo 本地预览可以打开 http://localhost:1313/index.json 查看，如果输出了一些数据如下图，说明你成功了。 2. js 代码 在 /layouts/_default 新建一个模板文件 search.html，大致的结构参考其他模板文件，然后写入我们需要的内容。 首先是一个简单的 html 结构，给 input 绑定一个事件。 &amp;lt;form class=&amp;#34;search&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;searchTerm&amp;#34; name=&amp;#34;searchTerm&amp;#34; autocomplete=&amp;#34;off&amp;#34; oninput=&amp;#34;initiateSearch()&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;div id=&amp;#34;resultsContainer&amp;#34;&amp;gt;请输入关键词进行搜索...&amp;lt;/div&amp;gt; 然后通过一个 get 请求获取 json 文件，传入关键词参数，生成搜索列表。 &amp;lt;script&amp;gt; function search(jsonData, searchTerm) { let results = []; for (let i = 0; i &amp;lt; jsonData.length; i++) { for (let property in jsonData[i]) { if (jsonData[i].hasOwnProperty(property) &amp;amp;&amp;amp; jsonData[i][property].toString().indexOf(searchTerm) &amp;gt; -1) { results.push(jsonData[i]); break; } } } return results; } function displayResults(searchResults) { let container = document.getElementById(&amp;#34;resultsContainer&amp;#34;); container.innerHTML = &amp;#34;&amp;#34;; if (searchResults.length &amp;gt; 0) { for (let i = 0; i &amp;lt; searchResults.length; i++) { let resultDiv = document.createElement(&amp;#34;div&amp;#34;); let resultTitle = document.createElement(&amp;#34;a&amp;#34;); resultTitle.innerText = searchResults[i].title; resultTitle.setAttribute(&amp;#39;href&amp;#39;, searchResults[i].permalink) resultDiv.appendChild(resultTitle); container.appendChild(resultDiv); } } else { let noResultsMessage = document.createElement(&amp;#34;p&amp;#34;); noResultsMessage.innerText = &amp;#34;没有找到搜索结果。&amp;#34;; container.appendChild(noResultsMessage); } } function initiateSearch() { let searchTerm = document.getElementById(&amp;#34;searchTerm&amp;#34;).value; let xhr = new XMLHttpRequest(); xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;/index.json&amp;#39;, true); xhr.onreadystatechange = () =&amp;gt; { if (xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status === 200) { let jsonData = JSON.parse(xhr.responseText); let searchResults = search(jsonData, searchTerm); displayResults(searchResults); } }; xhr.send(); } &amp;lt;/script&amp;gt; 然后再在 /content 新建一个 search.md 文件调用该模板即可。 --- slug: search title: 搜索 layout: search --- 写了一个基础的样式，可以直接使用。 .search { width: 100%; display: flex; align-items: center; height: 36px; } .search #searchTerm { width: 100%; height: 100%; outline: none; border: none; padding: 0 15px; box-shadow: 1px 2px 10px rgba(0, 0, 0, 0.1); } #resultsContainer { margin-top: 20px; } #resultsContainer div { margin-bottom: 10px; margin: 0; } #resultsContainer div a { display: block; width: 100%; padding: 6px 10px; transition: all 0.1s linear; border-radius: 4px; } #resultsContainer div a:hover { background: #f3f3f3; }</description>
    </item>
    <item>
      <title>宝塔如何实现进程守护？</title>
      <link>https://zishu.me/blog/70.html/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/70.html/</guid>
      <description>为了方便写一些东西，pc 端和手机端都可以同步，我用 leanote 搭建了一个在线笔记，但是必须在服务器后台运行一个指令 base run.sh 不然就访问不了端口，我也不可能时刻在终端保持指令运行，所以就需要把指令放在服务器后台，让它自己保持运行，刚好有这么一插件 Supervisor管理器 2.2 。 是一款免费的 Python 插件，点击下载即可，然后进入设置。 点击添加进程守护。 把进程环境目录和启动命令都填好，名称就随便写个自己能分辨出来的就行，最后点击确定。 让它一直保持启动状态就可以，其他的不用动，以后就不用打开服务器终端输入指令了，直接在浏览器访问端口，就可以访问网页。 如果为了更方便，做个反代处理即可。</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>油猴脚本 on 子舒的博客</title><author>子舒 (anghunk@gmail.com)</author>
    <link>https://zishu.me/tags/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</link>
    <description>一个热爱生活的前端开发工程师。</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>anghunk@gmail.com (子舒)</managingEditor>
    <webMaster>anghunk@gmail.com (子舒)</webMaster>
    <lastBuildDate>Mon, 07 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI 驱动的验证码自动识别之旅：从困扰到解放</title>
      <link>https://zishu.me/blog/262.html/</link>
      <pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><author>子舒 (anghunk@gmail.com)</author>
      <guid>https://zishu.me/blog/262.html/</guid>
      <description>&lt;p&gt;在当今互联网世界，验证码作为人机验证的重要工具无处不在。然而，频繁输入验证码对用户体验造成了不小的困扰。今天，我想分享一个名为 &amp;ldquo;CAPTCHA-automatic-recognition&amp;rdquo; 的开源项目，它巧妙地运用 AI 技术，实现了网页验证码的自动识别与填充。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-解决日常痛点&#34;&gt;1. 解决日常痛点&lt;/h3&gt;&#xA;&lt;p&gt;作为一名经常需要在不同网站注册和登录的开发者，我深受验证码困扰。有时仅仅是查询一个信息，就需要输入验证码；有时验证码字符扭曲到难以辨认，需要多次尝试才能通过。&lt;/p&gt;&#xA;&lt;p&gt;这些小小的摩擦积累起来，浪费了大量时间。我想：既然现代 AI 视觉模型已经如此强大，为什么不利用它们来自动识别验证码，节省我们的时间和精力呢？&lt;/p&gt;&#xA;&lt;p&gt;于是，&amp;ldquo;CAPTCHA-automatic-recognition&amp;rdquo; 项目诞生了。&lt;/p&gt;&#xA;&lt;p&gt;我选择了以油猴脚本的形式实现这个功能，因为它可以轻松地集成到各种网站上，无需修改网站源码。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/anghunk/UserScript/tree/main/CAPTCHA-automatic-recognition&#34;&gt;https://github.com/anghunk/UserScript/tree/main/CAPTCHA-automatic-recognition&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Greasyfork: &lt;a href=&#34;https://greasyfork.org/scripts/540822&#34;&gt;https://greasyfork.org/scripts/540822&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;     &#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img &#xD;&#xA;&#x9;&#x9;src=&#34;https://imgurl.zishu.me/2025/07/1751870273918.webp&#34;&#xD;&#xA;    alt=&#34;CAPTCHA-automatic-recognition&#34;class=&#34;lazy&#34;&#xD;&#xA;&#x9;&gt;&#xD;&#xA;  &lt;figcaption&gt;CAPTCHA-automatic-recognition&lt;/figcaption&gt;&#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-迭代与优化&#34;&gt;2. 迭代与优化&lt;/h3&gt;&#xA;&lt;p&gt;最初的版本非常简单，仅支持 OpenAI 和 Google Gemini 格式，识别文字验证码，需要用户需要手动点击识别按钮，后期则升级支持自动填充。&lt;/p&gt;&#xA;&lt;p&gt;关键问题是如何准确获取网页中的验证码图片，我简单做了一套图像检测程序，通过选择器找到可能是验证码的图片元素，比如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;captchaSelectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;img[src*=&amp;#34;captcha&amp;#34;]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;img[src*=&amp;#34;verify&amp;#34;]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随着用户的反馈，我加入了对阿里云通义千问的 API 支持，用户可以根据自己的需求和偏好选择不同的 AI 模型。&lt;/p&gt;&#xA;&lt;p&gt;并且我加强了对 prompt 的优化，根据网友的建议升级了 prompt，让模型更加准确地识别验证码。&lt;/p&gt;&#xA;&lt;p&gt;来源：&lt;a href=&#34;https://linux.do/t/topic/756503/135&#34;&gt;https://linux.do/t/topic/756503/135&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DEFAULT_PROMPT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`# Role: 验证码识别专家&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;## Profile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- language: 中文&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- description: 一个专为高精度识别验证码而设计的AI模型。能够快速、准确地从复杂的图像中提取字符或计算数学表达式的结果，并能有效对抗常见的干扰元素。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- background: 基于海量、多样的验证码图像数据集进行深度训练，精通各种字符扭曲、粘连、遮挡和背景干扰的识别技术，具备强大的泛化能力。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- personality: 精确、高效、客观、直接。只关注任务本身，不产生任何与结果无关的额外信息。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- expertise: 计算机视觉、高级光学字符识别（OCR）、图像预处理与去噪、模式识别、基础算术逻辑。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- target_audience: 需要自动化处理验证码的开发者、自动化测试工程师、数据科学家。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;## Skills&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;1. 核心识别能力&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 高精度字符识别: 准确识别大小写英文字母、数字，并能精确区分外形相似的字符（如：0和O，1和l，g和9）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 数学运算处理: 识别并解析图片中的数学算式（如：3+5*2），并计算出最终的数值结果。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 强抗干扰能力: 自动过滤和忽略图像中的干扰线、噪点、斑块、背景纹理等非关键信息。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 字符分割技术: 即使在字符粘连、重叠或间距不等的情况下，也能有效地将其分离以便独立识别。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;2. 辅助处理能力&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 图像预处理: 自动对输入图像进行灰度化、二值化、去噪等操作，以提升识别的准确率。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 快速响应: 以极低的延迟返回识别结果，满足实时性要求。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 结果格式化: 严格按照指定的格式输出，确保输出的纯净性，便于程序调用。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 鲁棒性: 对于不同字体、大小、颜色、角度的字符组合均有较高的识别成功率。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;## Rules&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;1. 基本原则：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 结果唯一: 输出内容必须是且仅是验证码的识别结果。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 绝对精确: 尽最大努力确保字符识别的大小写和数值计算的准确性。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 任务聚焦: 仅处理验证码内容，忽略图像中的任何其他元素。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 保持静默: 除最终结果外，不输出任何提示、标签、解释或说明。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;2. 行为准则：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 直接输出结果: 若为字符型验证码，直接返回字符串；若为计算题，直接返回计算后的数字。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 严格区分大小写: 必须准确识别并返回字符的原始大小写形式（例如&amp;#39;W&amp;#39;和&amp;#39;w&amp;#39;是不同字符）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 精准区分易混淆字符: 必须对数字“0”和字母“O”、数字“1”和字母“l”等易混淆字符进行准确区分。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 自动执行运算: 遇到数学表达式时，必须完成计算并仅返回最终的阿拉伯数字结果。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;3. 限制条件：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 禁止任何解释: 不得对识别过程、结果的置信度或遇到的困难进行任何说明。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 禁止附加文本: 返回的最终结果前后不能有任何空格、引号、标签或“答案是：”等引导性词语。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 禁止互动: 不得向用户提问或请求更清晰的图片。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;   - 禁止失败提示: 即使无法完全识别，也应根据已识别内容尽力输出，而不是返回“无法识别”之类的自然语言。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;## Workflows&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 目标: 接收一张验证码图片，精准、快速地返回其内容或计算结果。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 步骤 1: 接收图像并进行分析，判断验证码类型（字符型或数学计算型）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 步骤 2: 应用图像预处理技术，对图像进行降噪、增强和二值化，以凸显关键字符，消除干扰线和背景。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 步骤 3: 对处理后的图像进行字符分割，然后逐一识别。对于数学题，则识别数字和运算符。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 步骤 4: 整合识别结果。如果是字符，则按顺序拼接成字符串；如果是数学题，则执行运算。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 步骤 5: 输出最终结果。确保输出内容绝对纯净，符合Rules中的所有规定。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;- 预期结果: 一个不包含任何多余信息的字符串（如“aB5fG”）或一个数字（如“28”）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;## Initialization&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;作为验证码识别专家，你必须遵守上述Rules，按照Workflows执行任务。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过测试，可以大大提升对验证码的识别效果，不仅可以识别字母 + 数字的格式，还可以识别计算题型的验证码，包括加减法，乘法，除法等等，这是一个很大的进步。&lt;/p&gt;&#xA;&lt;p&gt;有用户反馈不知道模型是否可用，因此我加入了 &amp;ldquo;连通性检测&amp;rdquo; 的功能，可以帮助用户检查模型的可用性。&lt;/p&gt;&#xA;&lt;p&gt;在开发的后期，由于人力的因素，虽然内置的验证码识别程序足够满足很多网站使用，但依然有网友反馈识别失败。&lt;/p&gt;&#xA;&lt;p&gt;我意识到，这不是一个人可以完善的事情。因此我开发了高级设置功能，允许用户自定义验证码选择器和输入框选择器。这解决了不同网站验证码实现差异导致的兼容性问题。&lt;/p&gt;&#xA;&lt;p&gt;     &#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img &#xD;&#xA;&#x9;&#x9;src=&#34;https://imgurl.zishu.me/2025/07/1751869709402.webp&#34;&#xD;&#xA;    alt=&#34;高级设置&#34;class=&#34;lazy&#34;&#xD;&#xA;&#x9;&gt;&#xD;&#xA;  &lt;figcaption&gt;高级设置&lt;/figcaption&gt;&#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;并且简单写了一个&lt;a href=&#34;https://github.com/anghunk/UserScript/blob/main/CAPTCHA-automatic-recognition/docs/advanced-settings.md&#34;&gt;教程&lt;/a&gt;，帮助用户使用这个功能。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-遇到的问题&#34;&gt;3. 遇到的问题&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;跨域图片访问问题&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;很多网站的验证码图片设置了跨域限制，无法直接获取图像数据。为解决这个问题，我实现了一套图像处理流程，通过 Canvas 间接获取图像数据，然后处理为 base64 格式传输给 AI 模型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AI 模型选择与优化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;不同 AI 模型各有优缺点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OpenAI 模型精度高，但响应较慢&lt;/li&gt;&#xA;&lt;li&gt;Gemini 模型（特别是 gemini-2.5-flash-lite）速度快，平衡了性能和准确率&lt;/li&gt;&#xA;&lt;li&gt;通义千问适合中文环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;经过反复测试，我发现 &lt;code&gt;gemini-2.5-flash-lite&lt;/code&gt; 模型在验证码识别任务上表现最佳，因此成为我的首选。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-项目现状与未来规划&#34;&gt;4. 项目现状与未来规划&lt;/h3&gt;&#xA;&lt;p&gt;目前，这个项目已经在 GitHub 和 Greasyfork 上发布，获得了不少用户的好评。投稿到阮一峰周刊，也收录了该项目。&lt;/p&gt;&#xA;&lt;p&gt;来源：&lt;a href=&#34;https://github.com/ruanyf/weekly/blob/master/docs/issue-355.md#ai-%E7%9B%B8%E5%85%B3&#34;&gt;https://github.com/ruanyf/weekly/blob/master/docs/issue-355.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;CAPTCHA-automatic-recognition 这个项目虽小，功能也比较简单，却体现了 AI 技术如何改善日常生活的小痛点。从最初的想法到如今功能完善的工具，这个过程既有技术上的挑战，也有解决问题带来的成就感。&lt;/p&gt;&#xA;&lt;p&gt;如果你也经常被验证码困扰，不妨试试这个工具。它可能不是最复杂的 AI 应用，但一定是最实用的 AI 辅助工具之一。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/anghunk/UserScript/tree/main/CAPTCHA-automatic-recognition&#34;&gt;https://github.com/anghunk/UserScript/tree/main/CAPTCHA-automatic-recognition&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Greasyfork: &lt;a href=&#34;https://greasyfork.org/scripts/540822&#34;&gt;https://greasyfork.org/scripts/540822&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你觉得这个功能不错，欢迎点个 star 支持一下～&lt;/p&gt;</description>
    </item>
    <item>
      <title>掘金抽奖脚本</title>
      <link>https://zishu.me/blog/143.html/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><author>子舒 (anghunk@gmail.com)</author>
      <guid>https://zishu.me/blog/143.html/</guid>
      <description>&lt;p&gt;分享一个掘金抽奖的油猴脚本，可以一键签到，抽奖，梭哈。&lt;/p&gt;&#xA;&lt;p&gt;攒多一点矿石，体验买彩票的感觉。&lt;/p&gt;&#xA;&lt;summary&gt;油猴脚本代码&lt;details&gt;&#xA;```js&#xA;// ==UserScript==&#xA;// @name         掘金抽奖&#xA;// @namespace    http://tampermonkey.net/&#xA;// @version      1.2.5&#xA;// @description  掘金抽奖 签到 免费抽奖 5 连抽 10 连抽 可视化抽奖 petite-vue&#xA;// @author       无仙&#xA;// @match        https://juejin.cn/*&#xA;// @icon         https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web//static/favicons/favicon-32x32.png&#xA;// @require      https://unpkg.com/petite-vue&#xA;// ==/UserScript==&#xA;&lt;p&gt;(async function () {&#xA;&amp;lsquo;use strict&amp;rsquo;;&lt;/p&gt;&#xA;&lt;p&gt;const { createApp } = PetiteVue; // 不会吧不会吧，不会还有人不知道 petite-vue 吧&lt;/p&gt;&#xA;&lt;p&gt;const root = document.createElement(&amp;lsquo;div&amp;rsquo;);&#xA;root.class = &amp;lsquo;wx_draw_wrap&amp;rsquo;;&#xA;root.innerHTML = `&#xA;&amp;lt;div v-show=&amp;quot;!popup&amp;quot; class=&amp;ldquo;wx_draw&amp;rdquo; @click=&amp;ldquo;open&amp;rdquo;&amp;gt;掘金抽奖&lt;/div&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div v-if=&amp;quot;popup&amp;quot; class=&amp;quot;wx_popup&amp;quot;&amp;gt;&#xA;  &amp;lt;div class=&amp;quot;wx_mask&amp;quot; @click=&amp;quot;popup = false&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;  &amp;lt;div class=&amp;quot;wx_main&amp;quot;&amp;gt;&#xA;    &amp;lt;div class=&amp;quot;wx_header&amp;quot;&amp;gt;&#xA;      &amp;lt;div&amp;gt;掘金抽奖&amp;lt;/div&amp;gt;&#xA;      &amp;lt;div class=&amp;quot;wx_score&amp;quot;&amp;gt;当前矿石：{{ score }}&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;div class=&amp;quot;wx_body&amp;quot;&amp;gt;&#xA;      &amp;lt;div class=&amp;quot;wx_options&amp;quot;&amp;gt;&#xA;        &amp;lt;div @click=&amp;quot;check_in&amp;quot; v-if=&amp;quot;check_status === -1 || check_status === false&amp;quot;&amp;gt;签到&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div @click=&amp;quot;get_free&amp;quot; v-else&amp;gt;签到成功&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div @click=&amp;quot;draw(5)&amp;quot;&amp;gt;5 连抽&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div @click=&amp;quot;draw(10)&amp;quot;&amp;gt;10 连抽&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div @click=&amp;quot;draw(undefined)&amp;quot;&amp;gt;梭哈抽奖&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;&#xA;      &amp;lt;table cellpadding=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot; border=&amp;quot;0&amp;quot; width=&amp;quot;100%&amp;quot;&amp;gt;&#xA;        &amp;lt;thead&amp;gt;&#xA;          &amp;lt;tr&amp;gt;&#xA;            &amp;lt;th&amp;gt;奖品图片&amp;lt;/th&amp;gt;&#xA;            &amp;lt;th&amp;gt;奖品名称&amp;lt;/th&amp;gt;&#xA;            &amp;lt;th&amp;gt;中奖次数&amp;lt;/th&amp;gt;&#xA;          &amp;lt;/tr&amp;gt;&#xA;        &amp;lt;/thead&amp;gt;&#xA;        &amp;lt;tbody&amp;gt;&#xA;          &amp;lt;tr v-for=&amp;quot;item in award&amp;quot;&amp;gt;&#xA;            &amp;lt;td&amp;gt;&amp;lt;img :src=&amp;quot;item.lottery_image&amp;quot;/&amp;gt;&amp;lt;/td&amp;gt;&#xA;            &amp;lt;td&amp;gt;{{ item.lottery_name }}&amp;lt;/td&amp;gt;&#xA;            &amp;lt;td&amp;gt;{{ item.times }}&amp;lt;/td&amp;gt;&#xA;          &amp;lt;/tr&amp;gt;&#xA;        &amp;lt;/tbody&amp;gt;&#xA;      &amp;lt;/table&amp;gt;&#xA;&#xA;      &amp;lt;div class=&amp;quot;wx_loading&amp;quot; v-if=&amp;quot;loading&amp;quot;&amp;gt;&#xA;        &amp;lt;svg class=&amp;quot;circular&amp;quot; viewBox=&amp;quot;25 25 50 50&amp;quot;&amp;gt;&#xA;          &amp;lt;circle class=&amp;quot;path&amp;quot; cx=&amp;quot;50&amp;quot; cy=&amp;quot;50&amp;quot; r=&amp;quot;20&amp;quot; fill=&amp;quot;none&amp;quot; /&amp;gt;&#xA;        &amp;lt;/svg&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;div class=&amp;quot;wx_footer&amp;quot;&amp;gt;&#xA;      &amp;lt;div class=&amp;quot;wx_confirm wx_btn&amp;quot; @click=&amp;quot;popup = false&amp;quot;&amp;gt;关闭&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;`;&lt;/p&gt;&#xA;&lt;p&gt;// 查询奖品列表&#xA;const res = await fetch(&amp;lsquo;&lt;a href=&#34;https://api.juejin.cn/growth_api/v1/lottery_config/get&#39;&#34;&gt;https://api.juejin.cn/growth_api/v1/lottery_config/get&#39;&lt;/a&gt;, {&#xA;headers: {&#xA;cookie: document.cookie&#xA;},&#xA;method: &amp;lsquo;GET&amp;rsquo;,&#xA;credentials: &amp;lsquo;include&amp;rsquo;&#xA;}).then((res) =&amp;gt; res.json());&lt;/p&gt;&#xA;&lt;p&gt;const award = (res.data &amp;amp;&amp;amp; res.data.lottery ? res.data.lottery : []).map((item) =&amp;gt; ({ &amp;hellip;item, times: 0 }));&#xA;const { free_count, point_cost } = res.data; // 剩余免费抽奖次数，单次抽奖消耗数&lt;/p&gt;&#xA;&lt;p&gt;document.body.appendChild(root); // 插入 DOM&lt;/p&gt;&#xA;&lt;p&gt;// petite-vue init 初始化&#xA;createApp({&#xA;award,&#xA;popup: false,&#xA;loading: false,&#xA;score: 0,&#xA;free_count,&#xA;check_status: -1,&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;async open() {&#xA;  const res = await fetch(&#39;https://api.juejin.cn/growth_api/v1/get_cur_point&#39;, {&#xA;    headers: {&#xA;      cookie: document.cookie&#xA;    },&#xA;    method: &#39;GET&#39;,&#xA;    credentials: &#39;include&#39;&#xA;  }).then((res) =&amp;gt; res.json());&#xA;&#xA;  this.score = res.data; // 当前分数&#xA;&#xA;  this.popup = true;&#xA;&#xA;  (this.check_status === -1 || this.check_status === false) &amp;amp;&amp;amp; this.get_status();&#xA;},&#xA;async draw(times, is_not_free = true) {&#xA;  if (this.loading || times === 0) return;&#xA;&#xA;  // const is_not_free = !(this.free_count &amp;amp;&amp;amp; times === 1);&#xA;&#xA;  if (is_not_free &amp;amp;&amp;amp; this.score &amp;lt; point_cost * (times || 1)) return alert(&#39;分都不够想啥呢？&#39;);&#xA;&#xA;  let i = 0;&#xA;  const drawFn = async () =&amp;gt; {&#xA;    if ((is_not_free &amp;amp;&amp;amp; this.score &amp;lt; point_cost) || i === times) {&#xA;      this.free_count = 0;&#xA;      this.loading = false;&#xA;      this.open();&#xA;      console.log(`${times ? times + &#39;连抽&#39; : &#39;梭哈&#39;}结束！`);&#xA;      return;&#xA;    }&#xA;&#xA;    const result = await fetch(&#39;https://api.juejin.cn/growth_api/v1/lottery/draw&#39;, {&#xA;      headers: {&#xA;        cookie: document.cookie&#xA;      },&#xA;      method: &#39;POST&#39;,&#xA;      credentials: &#39;include&#39;&#xA;    }).then((res) =&amp;gt; res.json());&#xA;&#xA;    if (result.err_no !== 0) {&#xA;      console.log(result.err_msg);&#xA;      this.loading = false;&#xA;      this.open();&#xA;      return;&#xA;    }&#xA;&#xA;    i++;&#xA;    is_not_free &amp;amp;&amp;amp; (this.score -= point_cost);&#xA;&#xA;    if (result.data.lottery_type === 1) this.score += 66;&#xA;&#xA;    const item = this.award.find((item) =&amp;gt; item.lottery_id === result.data.lottery_id);&#xA;    item.times++;&#xA;&#xA;    console.log(`抽到：${result.data.lottery_name}`);&#xA;    drawFn();&#xA;  };&#xA;&#xA;  console.log(`开始${times ? times + &#39;连抽&#39; : &#39;梭哈&#39;}！`);&#xA;  this.loading = true;&#xA;  this.award.forEach((item) =&amp;gt; {&#xA;    item.times = 0;&#xA;  });&#xA;  try {&#xA;    drawFn();&#xA;  } catch (error) {&#xA;    this.loading = false;&#xA;    console.error(error);&#xA;  }&#xA;},&#xA;async check_in() {&#xA;  if (this.check_status) {&#xA;    this.get_free(); // 免费抽奖&#xA;    return;&#xA;  }&#xA;&#xA;  // 签到&#xA;  const check_in = await fetch(&#39;https://api.juejin.cn/growth_api/v1/check_in&#39;, {&#xA;    headers: {&#xA;      cookie: document.cookie&#xA;    },&#xA;    method: &#39;POST&#39;,&#xA;    credentials: &#39;include&#39;&#xA;  }).then((res) =&amp;gt; res.json());&#xA;&#xA;  if (check_in.err_no !== 0) {&#xA;    alert(&#39;签到失败！&#39;);&#xA;    this.check_status = false;&#xA;    return;&#xA;  }&#xA;&#xA;  this.check_status = true;&#xA;  this.score = check_in.data.sum_point;&#xA;  this.get_free(); // 免费抽奖&#xA;},&#xA;async get_status() {&#xA;  // 查询签到状态&#xA;  const today_status = await fetch(&#39;https://api.juejin.cn/growth_api/v1/get_today_status&#39;, {&#xA;    headers: {&#xA;      cookie: document.cookie&#xA;    },&#xA;    method: &#39;GET&#39;,&#xA;    credentials: &#39;include&#39;&#xA;  }).then((res) =&amp;gt; res.json());&#xA;&#xA;  this.check_status = today_status.data;&#xA;},&#xA;async get_free() {&#xA;  // 查询是否有免费抽奖次数&#xA;  const res = await fetch(&#39;https://api.juejin.cn/growth_api/v1/lottery_config/get&#39;, {&#xA;    headers: {&#xA;      cookie: document.cookie&#xA;    },&#xA;    method: &#39;GET&#39;,&#xA;    credentials: &#39;include&#39;&#xA;  }).then((res) =&amp;gt; res.json());&#xA;&#xA;  this.free_count = res.data.free_count;&#xA;&#xA;  if (res.data.free_count) {&#xA;    // 有免费抽奖次数&#xA;    this.draw(res.data.free_count, false);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;}).mount();&lt;/p&gt;&#xA;&lt;p&gt;// 处理样式&#xA;const style = &lt;code&gt;.wx_draw_wrap { box-sizing: border-box; position: fixed; top: 50%; left: 0px; z-index: 888888; margin-top: -20px; } .wx_draw { box-sizing: border-box; position: fixed; top: 50%; left: 0px; z-index: 888888; width: 40px; height: 40px; line-height: 16px; font-size: 12px; padding: 4px; background-color: rgb(232, 243, 255); border: 1px solid rgb(232, 243, 255); color: rgb(30, 128, 255); text-align: center; overflow: hidden; cursor: pointer; } .wx_popup { position: fixed; left: 0; top: 0; right: 0; bottom: 0; z-index: 999999; } .wx_mask { width: 100%; height: 100%; background: rgba(0,0,0,0.5); } .wx_main { --width: 460px; position: absolute; left: 50%; top: 50%; width: var(--width); transform: translate(-50%, -50%); background: #fff; border-radius: 4px; } .wx_main .wx_header { height: 40px; line-height: 40px; font-size: 16px; padding: 0 16px; border-bottom: 1px solid #999; display: flex; align-items: center; justify-content: space-between; color: #000; font-weight: 400; } .wx_score { font-size: 12px; font-size: #00a100; } .wx_main .wx_body { padding: 16px; border-bottom: 1px solid #999; position: relative; } .wx_main .wx_options { display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; } .wx_main .wx_options div { width: 80px; text-align: center; height: 24px; line-height: 24px; background-color: rgb(232, 243, 255); border: 1px solid #c9d4e3; color: rgb(30, 128, 255); cursor: pointer; border-radius: 2px; } .wx_main .wx_body p { margin: 0 0 8px; } .wx_body table { width: 100%; text-align: center; border-left: 1px solid #ccc; border-top: 1px solid #ccc; } .wx_body table th, .wx_body table td { border-right: 1px solid #ccc; border-bottom: 1px solid #ccc; line-height: 20px; } .wx_body table th { line-height: 28px; } .wx_main .wx_body img { vertical-align: middle; width: 40px; height: 40px; } .wx_main .wx_footer { padding: 12px 16px; text-align: right; } .wx_btn { display: inline-block; width: 48px; cursor: pointer; text-align: center; height: 20px; line-height: 20px; background-color: rgb(232, 243, 255); border: 1px solid #c9d4e3; color: rgb(30, 128, 255); border-radius: 2px; } .wx_loading { position: absolute; left: 0; top: 0; right: 0; bottom: 0; z-index: 9999999; background: rgba(0,0,0,0.65); } .wx_loading .circular { height: 42px; width: 42px; -webkit-animation: loading-rotate 2s linear infinite; animation: loading-rotate 2s linear infinite; position: absolute; left: 50%; top: 50%; margin-top: -21px; margin-left: -21px; } .wx_loading .path { -webkit-animation: loading-dash 1.5s ease-in-out infinite; animation: loading-dash 1.5s ease-in-out infinite; stroke-dasharray: 90, 150; stroke-dashoffset: 0; stroke-width: 2; stroke: #409eff; stroke-linecap: round; } @keyframes loading-rotate { 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes loading-dash { 0% { stroke-dasharray: 1, 200; stroke-dashoffset: 0; } 50% { stroke-dasharray: 90, 150; stroke-dashoffset: -40px; } 100% { stroke-dasharray: 90, 150; stroke-dashoffset: -120px; } }&lt;/code&gt;;&lt;/p&gt;&#xA;&lt;p&gt;const styleEl = document.createElement(&amp;lsquo;style&amp;rsquo;);&#xA;styleEl.textContent = style;&#xA;document.head.appendChild(styleEl);&#xA;})();&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;/details&amp;gt;&#xA;&amp;lt;/summary&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
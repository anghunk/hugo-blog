<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudflare on 子舒的博客</title>
    <link>https://zishu.me/tags/cloudflare/</link>
    <description>Recent content in Cloudflare on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/cloudflare/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github 仓库同步到 Cloudflare R2</title>
      <link>https://zishu.me/blog/236.html/</link>
      <pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/236.html/</guid>
      <description>我在 GitHub 搭建了一个图床，用于小量存储博客图片，为了稳定安全考虑，决定备份到 Cloudflare R2 存储桶一份，R2 默认有每月免费的 10G 存储、100 万次 A 类操作、1000 万次 B 类操作，备份完全足够了。&#xA;说到备份肯定是越自动化越好，手动上传是不可能的，因此我决定利用 GitHub Actions 执行自动任务。&#xA;话不多说，开始操作。&#xA;1. 建立 Cloudflare R2 存储桶 在 R2 页面新建一个存储桶，名称可以随意，就叫做 github-sync-imgurl，默认不公开就行了，这个不用调整。&#xA;然后在管理 R2 API 令牌中，创建一个新的 API 令牌，权限设为 管理员读和写，其他不用管默认设置，保存即可。&#xA;会生成一个 KEY_ID 和 ACCESS_KEY，这俩等会要用到，先记录一下。&#xA;2. GitHub 仓库设置 来到你需要备份的仓库，打开 Setting &amp;gt; Actions &amp;gt; General，勾选这两个设置然后保存，这个是必须的，否则 GitHub Actions 无法自动运行。&#xA;然后来到 Setting &amp;gt; Secrets and variables &amp;gt; Actions，点击 New repository secret 按钮开始创建密钥，按照下面的命名开始依次操作：&#xA;CLOUDFLARE_ACCOUNT_ID #你的 Cloudflare 账户 ID CLOUDFLARE_ACCESS_KEY_ID # Cloudflare R2 的访问密钥 ID CLOUDFLARE_SECRET_ACCESS_KEY # Cloudflare R2 的秘密访问密钥 CLOUDFLARE_BUCKET_NAME # 你在 Cloudflare R2 上的存储桶名称 图示如下：&#xA;最后在 Actions 中新建一个新的任务，可以直接复制代码使用，无需修改，保存后运行即可。&#xA;name: Sync to Cloudflare R2 on: schedule: - cron: &amp;#39;0 16 * * *&amp;#39; # 每天的16:00 UTC 时间触发（相当于东八区的 00:00） workflow_dispatch: # 允许手动触发 jobs: sync: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Install AWS CLI run: | sudo apt-get update sudo apt-get install -y awscli - name: Configure AWS CLI for Cloudflare R2 run: | aws configure set aws_access_key_id ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }} aws configure set aws_secret_access_key ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }} aws configure set default.region auto - name: Sync repository to Cloudflare R2 run: | aws s3 sync . s3://${{ secrets.CLOUDFLARE_BUCKET_NAME }} --endpoint-url=https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com --delete --exclude &amp;#34;.git/*&amp;#34; env: CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }} 由于使用了 aws s3 sync 命令，它会进行增量同步，这意味着它只会上传有变化的文件，而不会每次都重新上传整个仓库，避免消耗无用的 Cloudflare R2 流量。</description>
    </item>
    <item>
      <title>使用 cloudflare 反代 gravatar 生成镜像</title>
      <link>https://zishu.me/blog/182.html/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/182.html/</guid>
      <description>1.介绍 cloudflare 有一个非常好用的功能&amp;mdash;Workers，可以在无服务器的状态下运行一些程序，包括常见的反向代理等。&#xA;所以我利用这一功能实现对 gravatar 反代，达到国内访问加速的目的。&#xA;话不多说，开始流程操作，分享我的部署过程。&#xA;1.登陆后，在主页点击左侧的 Workers，然后点击创建服务。&#xA;2.服务名称随意填写，然后点击右下角创建。&#xA;3.点击右上角快速编辑&#xA;4.在左侧编辑器中输入下列的代码&#xA;2.代码 点击展开代码&#xD;// 替换成你想镜像的站点 const upstream = &amp;#39;gravatar.com&amp;#39; // 如果那个站点有专门的移动适配站点，否则保持和上面一致 const upstream_mobile = &amp;#39;gravatar.com&amp;#39; // 你希望禁止哪些国家访问 const blocked_region = [] // 禁止自访问 const blocked_ip_address = [] // 替换成你想镜像的站点 const replace_dict = { &amp;#39;$upstream&amp;#39;: &amp;#39;$custom_domain&amp;#39;, &amp;#39;//gravatar.com&amp;#39;: &amp;#39;&amp;#39; } //以下内容都不用动 addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; { event.respondWith(fetchAndApply(event.request)); }) async function fetchAndApply(request) { const region = request.headers.get(&amp;#39;cf-ipcountry&amp;#39;).toUpperCase(); const ip_address = request.headers.get(&amp;#39;cf-connecting-ip&amp;#39;); const user_agent = request.headers.get(&amp;#39;user-agent&amp;#39;); let response = null; let url = new URL(request.url); let url_host = url.host; if (url.protocol == &amp;#39;http:&amp;#39;) { url.protocol = &amp;#39;https:&amp;#39; response = Response.redirect(url.href); return response; } if (await device_status(user_agent)) { upstream_domain = upstream } else { upstream_domain = upstream_mobile } url.host = upstream_domain; if (blocked_region.includes(region)) { response = new Response(&amp;#39;Access denied: WorkersProxy is not available in your region yet.&amp;#39;, { status: 403 }); } else if(blocked_ip_address.includes(ip_address)){ response = new Response(&amp;#39;Access denied: Your IP address is blocked by WorkersProxy.&amp;#39;, { status: 403 }); } else{ let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set(&amp;#39;Host&amp;#39;, upstream_domain); new_request_headers.set(&amp;#39;Referer&amp;#39;, url.href); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; new_response_headers.set(&amp;#39;access-control-allow-origin&amp;#39;, &amp;#39;*&amp;#39;); new_response_headers.set(&amp;#39;access-control-allow-credentials&amp;#39;, true); new_response_headers.delete(&amp;#39;content-security-policy&amp;#39;); new_response_headers.delete(&amp;#39;content-security-policy-report-only&amp;#39;); new_response_headers.delete(&amp;#39;clear-site-data&amp;#39;); const content_type = new_response_headers.get(&amp;#39;content-type&amp;#39;); if (content_type.includes(&amp;#39;text/html&amp;#39;) &amp;amp;&amp;amp; content_type.includes(&amp;#39;UTF-8&amp;#39;)) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_host); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == &amp;#39;$upstream&amp;#39;) { i = upstream_domain } else if (i == &amp;#39;$custom_domain&amp;#39;) { i = host_name } if (j == &amp;#39;$upstream&amp;#39;) { j = upstream_domain } else if (j == &amp;#39;$custom_domain&amp;#39;) { j = host_name } let re = new RegExp(i, &amp;#39;g&amp;#39;) text = text.replace(re, j); } return text; } async function device_status (user_agent_info) { var agents = [&amp;#34;Android&amp;#34;, &amp;#34;iPhone&amp;#34;, &amp;#34;SymbianOS&amp;#34;, &amp;#34;Windows Phone&amp;#34;, &amp;#34;iPad&amp;#34;, &amp;#34;iPod&amp;#34;]; var flag = true; for (var v = 0; v &amp;lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) &amp;gt; 0) { flag = false; break; } } return flag; } 然后点击保存并部署，就可以成功反代 gravatar 镜像了。&#xA;然后照葫芦画瓢，可以通过这种方式反代任何网站，访问起来大致无压力，延迟 100+ms 左右。&#xA;3.自定义域名 在触发器中可以找到自定义域名选项，输入已经绑定 cloudflare 的域名，再次赞美 cloudflare，如果事前绑定好了域名，在这里可以直接输入二级域名，cloudflare 会自动解析，全部都是自动化的。&#xA;在主页左侧的 网站 绑定域名。&#xA;# 分享我的免费镜像。 https://gravatar.zsh.im/avatar </description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on 子舒的博客</title>
    <link>https://zishu.me/tags/ajax/</link>
    <description>Recent content in Ajax on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将数据库中的图片信息导出并调用</title>
      <link>https://zishu.me/blog/73.html/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/73.html/</guid>
      <description>接口链接：http://121.196.166.173/img/img.php 展示 demo：http://121.196.166.173/img 前言 为了写博客以及其他的一些用途，我使用服务器搭建了一个连接 github 仓库的上传网页，并且在数据库中记录上传的信息，比如缩略名、时间戳和图片链接。分别对应 GitHub 仓库中的图片，但是后期我发现在 GitHub 查看图片非常别扭，因此我打算写一个可展示图片的网页，把 GitHub 仓库中的图片通过链接展示出来，当然我们不可能一张张复制，还好有数据库。 看一下具体内容 写一个接口 很好，拥有我们需要的字段。事不宜迟，直接开动，下面是完成的接口代码。 &amp;lt;?php header(&amp;#39;Content-Type:application/json; charset=utf-8&amp;#39;); header(&amp;#34;Access-Control-Allow-Origin:*&amp;#34;); $servername = &amp;#34;localhost&amp;#34;; $username = &amp;#34;imgbed&amp;#34;; $password = &amp;#34;imgbed&amp;#34;; $dbname = &amp;#34;imgbed&amp;#34;; // 创建连接 $conn = new mysqli($servername, $username, $password, $dbname); // 检测连接 if ($conn-&amp;gt;connect_error) { die(&amp;#34;连接失败：&amp;#34; . $conn-&amp;gt;connect_error); } // imgmd5 名称转 md5 // imguploadtime 上传时间戳 // imgurl 链接 // 上传 ip $sql = &amp;#34;select imgmd5,imguploadtime,imgurl,imguploadip from remote_imgs &amp;#34;; $result = $conn-&amp;gt;query($sql); if ($result-&amp;gt;num_rows &amp;gt; 0) { // 输出数据 while($row = $result-&amp;gt;fetch_assoc()) { $data[]=$row; } $json = json_encode($data,JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT);//把数据转换为 JSON 数据。 exit($json) ; } else { echo &amp;#34;未查询到结果！&amp;#34;; } $conn-&amp;gt;close(); ?&amp;gt; 分别将缩略名，时间戳，图片链接，和上传 ip 通过 json 格式导出，非常完美。接口链接：http://121.196.166.173/img/img.php 使用 ajax 进行调用 然后只需要在前端将接口调用，然后简单写一个页面即可，下面是 html 代码，，通过 ajax 调用。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;图床&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .container { max-width: 1000px; margin: 40px auto; display: flex; flex-wrap: wrap; justify-content: space-between; } .item { width:300px; /* height: 300px; */ overflow: hidden; border: 2px solid #bbb; margin-bottom: 24px; } .item a{ display: block; width: 300px; /* height: 300px; */ overflow: hidden; } .item img{ max-width: 300px; max-height: 300px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.zburu.com/list/jquery3.6.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var str = &amp;#39;&amp;#39;; $.ajax({ url: &amp;#39;http://121.196.166.173/img/img.php&amp;#39;, type: &amp;#39;get&amp;#39;, dataType: &amp;#39;json&amp;#39;, async: false, success: function (data) { $.each(data, function (i, item) { console.log(item) list = &amp;#34;&amp;lt;div class=&amp;#39;item&amp;#39;&amp;gt;&amp;lt;p&amp;gt;缩略名：&amp;#34; + item.imgmd5 + &amp;#34;&amp;lt;/p&amp;gt;&amp;#34; + &amp;#34;&amp;lt;p&amp;gt;时间戳：&amp;#34; + item.imguploadtime + &amp;#34;&amp;lt;/p&amp;gt;&amp;#34; + &amp;#34;&amp;lt;a target=&amp;#39;_blank&amp;#39; href=&amp;#39;&amp;#34;+ item.imgurl +&amp;#34;&amp;#39;&amp;gt;&amp;lt;img src=&amp;#39;&amp;#34; + item.imgurl + &amp;#34;&amp;#39;&amp;gt;&amp;lt;/a&amp;gt;&amp;#34; + &amp;#34;&amp;lt;p&amp;gt;上传 ip：&amp;#34; + item.imguploadip + &amp;#34;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;#34; str += list; }), $(&amp;#34;.container&amp;#34;).html(str); console.log(&amp;#39;数据请求成功&amp;#39;) }, error: function () { console.log(&amp;#39;数据请求失败&amp;#39;) } }); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 最后我把这个页面传到我的服务器当中，可以看一下效果 http://121.196.166.173/img 时间仓促，我也没使用更好的 ui 进行优化，只是大致写一下这个过程，待到以后具体使用时，我会对这个展示图片的页面进一步优化。</description>
    </item>
    <item>
      <title>在 vue 中使用 axios 调用数据</title>
      <link>https://zishu.me/blog/71.html/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/71.html/</guid>
      <description>如何在 vue 中完成一次接口的调用？首选就是 axios，方便快捷又好用，支持各种 api ,封装也很方便。 先用 node 安装一下。 npm install axios 然后在 main.js 文件中引入。 import axios from &amp;#39;axios&amp;#39; import VueAxios from &amp;#39;vue-axios&amp;#39; Vue.use(VueAxios, axios) 以我的一个工程目录作为实例，看一下代码。 // ListThere.vue // html 代码 ... &amp;lt;div&amp;gt;{{ info }}&amp;lt;/div&amp;gt; ... // js 代码 import axios from &amp;#34;axios&amp;#34;; export default { name: &amp;#34;ListThere&amp;#34;, data() { return { ... }; }, components: { ... }, methods: { ... }, mounted() { axios .get(&amp;#34;http://api.h-camel.com/api?mod=interview&amp;amp;ctr=issues&amp;amp;act=today&amp;#34;) .then((response) =&amp;gt; (this.info = response)) }, }; 数据成功的被取到，然后需要将它在页面中展示出来。使用 vue 自带的 v-for 列表渲染。 &amp;lt;ul class=&amp;#34;list-api-show&amp;#34;&amp;gt; &amp;lt;li v-for=&amp;#34;(item, index) in show&amp;#34; :key=&amp;#34;index&amp;#34;&amp;gt; {{ item.title }} &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 然后通过 axios 把数据指向 v-for. mounted() { axios // ... .then((response) =&amp;gt; (this.show = response.data.result.today)) } 数据成功取出然后展示在 v-for 里面。 当然了，这是成功的情况，加入失败了呢？我们需要浏览器给出提示，所以 axios 给出了一个 api &amp;mdash; err 语法。 mounted() { axios // ... .catch(function (error) { if (error.response) { console.log(error.response.data); console.log(error.response.status); console.log(error.response.headers); console.log(&amp;#39;err&amp;#39;) } else if (error.request) { console.log(error.request); console.log(&amp;#39;err&amp;#39;) } else { console.log(&amp;#39;Error&amp;#39;, error.message); console.log(&amp;#39;err&amp;#39;) } console.log(error.config); console.log(&amp;#39;err&amp;#39;) }); } 如果接口有问题，或者我们调用时代码写错了，都会给出报错提示，具体什么样的错误会有什么样的警告，需要我们一一去经历摸索。</description>
    </item>
    <item>
      <title>ajax 和 js 事件的执行顺序</title>
      <link>https://zishu.me/blog/58.html/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/58.html/</guid>
      <description>有一个需求，滚轮滚动到相应位置的时候执行当前的动画，这个动画在footer里面，而网页的主体通过ajax进行渲染，我在 js 里面调用 ajax 渲染数据，然后再获取主体的高度，滚动到该高度的时候执行动画。 本地测试了一下没什么问题，该有的效果都有了。放在服务器上测试发现无论怎么写，都是先获取主体的高度，然后才进行数据的渲染。那么必然高度是一个极小的值，不符合我想要的属性。 我大致想了两种解决办法，均以失败告终，本地是 ajax 先执行，服务器是 js 先执行。 让获取高度的事件时间延时 500ms，发现最后获取不到事件了； 将该事件写在 ajax 的 success 回调里面，结果是只有打开网页第一次能够成功，然后不管刷新多少次均无效，事件被屏蔽，所以方法二也被废除； 最后我想到了，ajax 不就是一种异步方法，我将其改为同步不就行，先让 ajax 执行完在执行 js 事件。 async: false, 我在 ajax 里面写了async这个方法，false 意思是将其默认为同步获取数据，很好，回到服务器打开控制台，发现是先渲染了数据，才获取了主体的高度，问题得以解决。 当然这样做有弊端的，如果接口出问题，ajax 渲染失败，那么整个网页的 js 都将执行不了。不过我想真到了数据都渲染不出的地方，访问网页就没有意义了，所以最后我采用了这种方法。</description>
    </item>
    <item>
      <title>ajax 拼接模版字符串的几种方法</title>
      <link>https://zishu.me/blog/59.html/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/59.html/</guid>
      <description>起因是因为 IE10 不兼容 es6，所以引发了一系列的问题。 一 使用ajax拼接字符串有很多方法，最简单的莫过于使用 es6 的语法中的关键符号， str += `&amp;lt;li class=&amp;#34;wrap-item&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-wrap&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-son&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34; ` + item.link + `&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34; ` + item.pic+ `&amp;#34; alt=&amp;#34;缩略图&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-main&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-title&amp;#34;&amp;gt; &amp;lt;span&amp;gt;编号：&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt; ` + item.title + ` &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-guide&amp;#34;&amp;gt; ` + item.guide + ` &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-link&amp;#34; id=&amp;#34;picLink&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34; ` + item.link + ` &amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;预览&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; ` 可以很快的把模版字符串写好，但是正因为它是es6的新特性，因此对于低版本的浏览器兼容性不太好，报错无效字符。 二 因此还有一种较为麻烦的写法&amp;quot; &#39;&#39; &amp;quot; ，使用单引号和双引号将标签和字符串连接起来。因为太过繁琐，所以需要特别仔细的查看，一不小心漏个符号，就会导致网页报错。 p = &amp;#34;&amp;lt;li class=&amp;#39;wrap-item&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-wrap&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-son-wrap&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-son&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;a href=&amp;#39;&amp;#34;+item.link+&amp;#34;&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;img src=&amp;#39;&amp;#34;+item.pic+&amp;#34;&amp;#39; alt=&amp;#39;缩略图&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/a&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-main&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-title&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;span&amp;gt;&amp;#34;+&amp;#34;编号：&amp;#34;+&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;+&amp;#34;&amp;lt;span&amp;gt;&amp;#34;+item.title+&amp;#34;&amp;lt;/span&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-guide&amp;#39;&amp;gt;&amp;#34; +item.guide +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;div class=&amp;#39;pic-link&amp;#39; id=&amp;#39;picLink&amp;#39;&amp;gt;&amp;#34; +&amp;#34;&amp;lt;a href=&amp;#39;&amp;#34;+item.link+&amp;#34;&amp;#39;&amp;gt;&amp;#34; +&amp;#34;预览&amp;#34; +&amp;#34;&amp;lt;/a&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; +&amp;#34;&amp;lt;/li&amp;gt;&amp;#34; str += p; 在不同的情况下使用不同的方法，多掌握几种方法总是不亏的，能适用与各种开发环境。</description>
    </item>
    <item>
      <title>用 ajax 请求获取数据</title>
      <link>https://zishu.me/blog/57.html/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/57.html/</guid>
      <description>通过 jquery 进行 ajax 请求数据是一种较为简便的方式，我简单写了一个本地的data.json文件，然后用get请求数据，下面是部分代码 // ajax 请求获取数据 function picShow(){ var str = &amp;#39;&amp;#39;; $.ajax({ url:&amp;#39;./js/data.json&amp;#39;, type:&amp;#39;get&amp;#39;, dataType:&amp;#39;json&amp;#39;, success:function(data){ console.log(&amp;#39;success&amp;#39;) }, error: function() { console.log(&amp;#39;error&amp;#39;) } }) } picShow(); 但是这样做有一个弊端，无法在本地预览，因为浏览器禁止客户端直接获取本地数据，这也算一个跨域问题了，不过这也是为了保证用户的安全。当然这对前端来说很不爽！ 其实解决的方法也很简单，通过 node 服务，用live server在本地跑一下，就可以让 ajax 获取数据，当然还有其他更好的解决方法，或者直接在服务器跑，通过 jsonp 等等。 live server 不明白的可以百度看看，也是一个技巧。</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 子舒的博客</title>
    <link>https://zishu.me/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Feb 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用宝塔面板安装 autoPicCdn 图床工具</title>
      <link>https://zishu.me/blog/51.html/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/51.html/</guid>
      <description>很多小伙伴在做个人网站或者博客时，总能用到各种各样的图床工具，毕竟在写文章的时候需要插入一些图片，我也不例外，来盘点一下之前用的工具， 最开始是找一些免费的图床网站，比如 sm.ms 等，但是后来为了安全性和稳定性考虑放弃了这种。 然后是在 github，gitee 仓库存储的（缺点就是 github 访问速度有些尴尬，gitee 其实挺好的，但时用起来怪怪的） 阿里云 oss 储存桶（挺好使的，搭配 picgo 软件，一年也才 9.9，但是链接很尴尬，直接下载，无法右键访问图片，搜过了解决办法，嫌太麻烦就搁置了，至今在那放着） 后来在自己的服务器建一个网站，把图片放进去，使用的时候直接引用链接（缺点就是上传太麻烦，然后就是图片太占内存了，影响服务器的性能） 然后就是今天的重头戏，autoPicCdn，一款开源软件 也是基于 github 实现图床功能，后来才知道可以用 jsdelivr 给资源进行加速，autoPicCdn 就是基于这样的功能实现。 今天就讲讲用宝塔面板配置 autoPicCdn 的流程吧！ 准备工作 进入 github 仓库下载资源到本地。 https://github.com/yumusb/autoPicCdn 在 github 建立一个新的仓库，自由命名，我的是 shuxhan/pic-cdn，简单易懂 去这个页面 https://github.com/settings/tokens生成一个有写权限的 token（repo：Full control of private repositories 和 write:packages 前打勾，然后点击确定，会生成一个 token 码，记住它，最好复制到你的记事本，不然一刷新网页就不会再显示了 然后解压。 上传到服务器 先利用自己的域名添加一个新的站点，比如我使用的是 img.shuxhan.com ，然后建立数据库。 站点建立成功后，进入目录将默认生成的文件删除，然后点击上传，找到刚才解压的文件，点击上传即可。 配置文件 找到目录中的 up.php 配置文件， 将下面两个地方配置好，具体的内容在代码里。 //必选项 define(&amp;#34;TYPE&amp;#34;,&amp;#34;GITHUB&amp;#34;);//选择 github //define(&amp;#34;TYPE&amp;#34;,&amp;#34;GITEE&amp;#34;);//选择 gitee，如果使用 gitee，需要手动建立 master 分支，可以看这里 https://gitee.com/help/articles/4122 define(&amp;#34;USER&amp;#34;,&amp;#34;shuxhan&amp;#34;);//你的 GitHub/Gitee 的用户名 define(&amp;#34;REPO&amp;#34;,&amp;#34;pic-cdn&amp;#34;);//必须是上面用户名下的 公开仓库 define(&amp;#34;MAIL&amp;#34;,&amp;#34;shuxhan@163.com&amp;#34;);//邮箱无所谓，随便写 define(&amp;#34;TOKEN&amp;#34;,&amp;#34;971b0a96ff5af545d5fe081f829cf5542007e70b&amp;#34;); // Github 去这个页面 https://github.com/settings/tokens生成一个有写权限的token（repo：Full control of private repositories 和 write:packages 前打勾） // gitee 去往这个页面 https://gitee.com/personal_access_tokens //数据库配置文件 //请确保把当前目录下的 pic.sql 导入到你的数据库 $database = array( &amp;#39;dbname&amp;#39; =&amp;gt; &amp;#39;img&amp;#39;,//你的数据库名字 &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;localhost&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 3306, &amp;#39;user&amp;#39; =&amp;gt; &amp;#39;img&amp;#39;,//你的数据库用户名 &amp;#39;pass&amp;#39; =&amp;gt; &amp;#39;img&amp;#39;,//你的数据库用户名对应的密码 ); 然后最重要的一步是，将目录下的 pic.sql 导入刚才建立并链接的数据库，先右键复制 pic.sql 文件，然后进入路径 点击粘贴即可。 测试访问 打开你的浏览器，输入绑定的站点 然后随便截个图，然后拖动到上传窗口，显示上传成功，下面是图片的廉价，复制 markdown 可以在写文章的时候使用辣！ 通过 jsdelivr 加速，结果非常令人满意，以后就决定使用 github + jsdelivr + autoPicCdn 来做图床工具啦！</description>
    </item>
    <item>
      <title>webpack 安装配置指令</title>
      <link>https://zishu.me/blog/30.html/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/30.html/</guid>
      <description>进行重新加载编译。实际就是将浏览器不认识的语法编译成浏览器认识的语法。比如 less 编译成 css，ES6 语法 转成 ES5 等等。 减少 io 请求，通常我们在请求后，会返回一个 html 到浏览器。这时，我们如果打开控制台，就会发现在 html 页面通过 script,link 等标签引用的静态资源，浏览器会再次发出请求去获取这些资源。但是 webpack 的打包，将所有的静态资源都合并好了，减少了 io 请求。 # 安装webpack npm install --save-dev webpack # 安装webpack-cli依赖 npm install --save-dev webpack-cli # 创建新项目 mkdir demo # cd项目 cd demo # 初始化 npm init -y # 安装开发版本cli npm install webpack webpack-cli --save-dev 新建一个 html 文件和一个 js 文件，工程目录如下 demo |- package.json + |- index.html + |- /src + |- index.js src/index.js: function component() { var element = document.createElement(&amp;#39;div&amp;#39;); // Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的 element.innerHTML = _.join([&amp;#39;Hello&amp;#39;, &amp;#39;webpack&amp;#39;], &amp;#39; &amp;#39;); return element; } document.body.appendChild(component()); index.html: &amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;起步&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.com/lodash@4.16.6&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;./src/index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 在 package.json 中： 删除&amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,添加&amp;quot;private&amp;quot;: true 调整工程目录： demo |- package.json + |- /dist + |- index.html - |- index.html |- /src |- index.js 要在index.js中打包lodash依赖，我们需要在本地安装 library，终端输入指令： npm install --save lodash 然后调整index.js内容 // 添加一行代码 import _ from &amp;#39;lodash&amp;#39;; 在dist/index.html中可以把引入的外部文件lodash删去 删去&amp;lt;script src=&amp;quot;./src/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 添加&amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 执行终端： npx webpack 即可在dist中打包生成需要的main.js文件 还可以手动配置文件，在根目录下新建一个webpack.config.js文件 const path = require(&amp;#39;path&amp;#39;); module.exports = { // 这里放着需要打包的文件，如果多个文件，用数组形式写 entry: &amp;#39;./src/index.js&amp;#39;, output: { // 这里是打包生成的文件名，还可以手动修改 filename: &amp;#39;bundle.js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) } }; 考虑到用 CLI 这种方式来运行本地的 webpack 不是特别方便，我们可以设置一个快捷方式， 在package.json中的&amp;quot;scripts&amp;quot;新增 &amp;#34;build&amp;#34;: &amp;#34;webpack&amp;#34; 这样就可以使用npm run build指令代替之前的npx了 把之前dist文件夹里面的js文件删去，然后重新打包 npm run build 看一下工程目录 demo |- package.json |- webpack.config.js |- /dist |- bundle.js |- index.html |- /src |- index.js |- /node_modules 没问题，成功打包，浏览器也正常显示 在 js 文件中import了一个 css 文件，需要在配置中安装并添加style-loaader和css-loader npm install --save-dev style-loader css-loader webpack.config.js: const path = require(&amp;#39;path&amp;#39;); module.exports = { entry: &amp;#39;./src/index.js&amp;#39;, output: { filename: &amp;#39;bundle.js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) }, // 添加的内容 module: { rules: [ { test: /\.css$/, use: [ &amp;#39;style-loader&amp;#39;, &amp;#39;css-loader&amp;#39; ] } ] } }; 然后在 js 模块中： import &amp;#39;./style.css&amp;#39; npm run build就可以自动解析打包啦 加载图片 下载安装file-loader npm install --save-dev file-loader webpack.config.js: module: { rules: [ { test: /\.css$/, use: [ &amp;#39;style-loader&amp;#39;, &amp;#39;css-loader&amp;#39; ] },{ test: /\.(png|svg|jpg|gif)$/, use: [ &amp;#39;file-loader&amp;#39; ] } ] } 加载字体 webpack 加载字体资源 记载数据资源 此外，可加载的有用资源还有数据，json文件，CSV，TSV，XML等，实际上，json是内置的，可以直接import data from &#39;./data.json&#39;引入 但是CSV，TSV，XML不可以，需要配置一下依赖 终端下载安装： npm install --save-dev csv-loader xml-loader webpack.config.js: { test: /\.(csv|tsv)$/, use: [ &amp;#39;csv-loader&amp;#39; ] }, { test: /\.xml$/, use: [ &amp;#39;xml-loader&amp;#39; ] } 在src目录下添加一个 json 文件data.json 然后在index.js中引入： import data from &amp;#39;./data.json&amp;#39;</description>
    </item>
  </channel>
</rss>

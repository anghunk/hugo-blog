<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 子舒的博客</title>
    <link>https://zishu.me/tags/python/</link>
    <description>Recent content in Python on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python 通过 json 生成小文件</title>
      <link>https://zishu.me/blog/212.html/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/212.html/</guid>
      <description>记录一个方法，pyhton 通过 json 文件，在同级目录下生成对应格式的小文本。 import json def generate_files_from_json(json_file): with open(json_file, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as f: data = json.load(f) for item in data: for key, value in item.items(): if isinstance(value, list): for sub_item in value: for sub_key, sub_value in sub_item.items(): if isinstance(sub_value, dict) and &amp;#39;list&amp;#39; in sub_value: for sub_sub_item in sub_value[&amp;#39;list&amp;#39;]: if &amp;#39;id&amp;#39; in sub_sub_item and &amp;#39;css&amp;#39; in sub_sub_item: id_value = sub_sub_item[&amp;#39;id&amp;#39;] css_value = sub_sub_item[&amp;#39;css&amp;#39;] create_file(id_value, css_value) def create_file(file_name, content): file_path = f&amp;#34;{file_name}.css&amp;#34; with open(file_path, &amp;#39;w&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as file: file.write(content) print(f&amp;#34;File &amp;#39;{file_path}&amp;#39; created successfully.&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: json_file_path = &amp;#39;your_json_file.json&amp;#39; generate_files_from_json(json_file_path) import json def generate_files_from_json(json_file): with open(json_file, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as f: data = json.load(f) for item in data: for key, value in item.items(): if isinstance(value, dict) and &amp;#39;list&amp;#39; in value: for sub_item in value[&amp;#39;list&amp;#39;]: if &amp;#39;id&amp;#39; in sub_item and &amp;#39;css&amp;#39; in sub_item: id_value = sub_item[&amp;#39;id&amp;#39;] css_value = sub_item[&amp;#39;css&amp;#39;] create_file(id_value, css_value) def create_file(file_name, content): file_path = f&amp;#34;{file_name}.css&amp;#34; with open(file_path, &amp;#39;w&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as file: file.write(content) print(f&amp;#34;File &amp;#39;{file_path}&amp;#39; created successfully.&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: json_file_path = &amp;#39;your_json_file.json&amp;#39; generate_files_from_json(json_file_path)</description>
    </item>
    <item>
      <title>我的 python 学习笔记</title>
      <link>https://zishu.me/blog/61.html/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/61.html/</guid>
      <description>之所以学习 Python，本意是想写一些脚本之类的程序，用来在浏览器爬一些自己想要的文字，图片等资料，这些程序其实 GitHub 蛮多的，但奈何我对后端的语言一窍不通，直接拿过来给我用我都不会。 因此就萌生了先学习 Python 基础知识的想法，一直听说廖雪峰的 Python 教程写的不错，这次趁着这个机会要好好研读一番。也没想说用的多牛逼，至少希望能为自己浅薄的技术栈再增加一点光彩，毕竟我也曾梦想成为一个全栈开发。 下载安装完 Python 环境，就开始学习吧！ 运行我的第一个 python 程序 print(&amp;#39;hello,world&amp;#39;) 数据类型 在 Python 中，能直接处理的数据类型有几种，整数、浮点数、字符串、布尔值、空值、变量。 这与其他语言其实差别并不大，数据类型基本都是相似的，大概只有变量有自己的特性，所以我单独拿出来记录一下。 变量 python 是一门动态语言，在赋值时可以不断改变，比如： a = 123 print(a) # 终端输出数值 123 a = &amp;#39;abc&amp;#39; print(a) # 终端输出字符串 abc 这是允许的，而在 Java 中则不行，它是一门静态语言，如果多次赋值会报错。相对来说，动态语言更灵活，当然，各有利弊罢了。 并且在赋值上面有一个逻辑顺序，比如定义一个 a = &#39;a&#39; 的变量。在 Python 中其实走了两步，先创造了一个字符串 a ，然后将这个字符串赋值给变量 a。 其实这在数学上是有些反逻辑的，x = x + 2 这个计算是行不通的在数学上，但是在计算机中，先计算 x + 2 ，然后将其赋值给左侧的 x ，这是计算机的逻辑。 x = 1 x = x + 2 print(x) # 3 其实很多计算机语言都是如此，比如我们所熟知的 js 等等。 如果有多个变量相互赋值的话，都是一行一行执行 a = 1 b = a a = 2 print(a) print(b) 最后输出的结果分别是 2, 1 Python 支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。 对变量赋值 x = y 是把变量 x 指向真正的对象，该对象是变量 y 所指向的。随后对变量 y 的赋值不影响变量 x 的指向。 注意：Python 的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如 Java 对 32 位整数的范围限制在 -2147483648-2147483647。 Python 的浮点数也没有大小限制，但是超出一定范围就直接表示为 inf（无限大）。&amp;mdash;《廖雪峰的官方网站》 字符串和编码 Python 提供了两个处理编码的属性，ord 和 chr ord(&amp;#39;舒&amp;#39;) # 33298 # 将字符串转换为整数表示 chr(33298) # &amp;#39;舒&amp;#39; # 将整数表示的内容转换为字符串 list list 类似于 js 中的 Array，是多个数据的列表，写法如下 &amp;gt;&amp;gt;&amp;gt; classmates = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] 这时候我们就可以说变量 classmates 是一个 list。 有一个 len() 可以输出 list 元素的个数 &amp;gt;&amp;gt;&amp;gt; len(classmates) &amp;gt;&amp;gt;&amp;gt; 3 同时 list 也有索引，从 0 开始，最后一个索引是 len(classmates)-1，同时如果想直接输出最后一个元素，可以使用 classmates[-1]. &amp;gt;&amp;gt;&amp;gt; classmates[-1] &amp;gt;&amp;gt;&amp;gt; &amp;#39;c&amp;#39; 既然都可以用 -1 表示最后一个元素，能不能用 -2 表示倒数第二个呢？答案是可以的。 &amp;gt;&amp;gt;&amp;gt; classmates[-2] &amp;gt;&amp;gt;&amp;gt; &amp;#39;b&amp;#39; 另外需要注意的是，在使用索引时不可超出范围，否则会报出下面的错误。 &amp;gt;&amp;gt;&amp;gt; classmates[4] Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; IndexError: list index out of range list 是一个可变的有序列表，可以往里面添加或者删除元素。 append 在末尾添加元素 &amp;gt;&amp;gt;&amp;gt; classmates.append(&amp;#39;d&amp;#39;) &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;] insert 在指定位置添加元素 其中 1 是索引，表示在索引为 1 的地方插入元素，后面的元素自然往后顺延。 &amp;gt;&amp;gt;&amp;gt; classmates.insert(1, &amp;#39;d&amp;#39;) &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;a&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] pop 删除末尾的元素 &amp;gt;&amp;gt;&amp;gt; classmates.pop() &amp;#39;c&amp;#39; # 输出的时候被删除的元素 &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] pop(i) 删除指定位置的元素 &amp;gt;&amp;gt;&amp;gt; classmates.pop(1) &amp;#39;b&amp;#39; # 输出被删除的元素 &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;</description>
    </item>
  </channel>
</rss>

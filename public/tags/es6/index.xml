<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ES6 on 子舒的博客</title>
    <link>https://zishu.me/tags/es6/</link>
    <description>Recent content in ES6 on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ES5 和 ES6 的区别？</title>
      <link>https://zishu.me/blog/48.html/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/48.html/</guid>
      <description>一、javascript 由三部分组成 1.ECMAScript（核心） 它规定了语言的组成部分：法语，类型，语句，关键字，操作符等等。 2.DOM（文档对象模型） DOM 把整个页面映射为一个多层节点结果，开发人员可借助 DOM 提供的 API，轻松地删除、添加、替换或修改任何节点。 3.BOM（浏览器对象模型） 支持可以访问和操作浏览器窗口的浏览器对象模型，开发人员可以控制浏览器显示的页面以外的部分。 二、什么是 ES5？ 作为 ECMAScript 第五个版本（第四版因为过于复杂废弃了），浏览器支持情况可看第一副图，增加特性如下。 1.strict 模式 严格模式，限制一些用法，&amp;lsquo;use strict&amp;rsquo;; 2.Array 增加方法 增加了 every、some、forEach、filter、indexOf、lastIndexOf、isArray、map、reduce、reduceRight 方法 PS：还有其他方法 Function.prototype.bind、String.prototype.trim、Date.now 3.Object 方法 Object.getPrototypeOf Object.create Object.getOwnPropertyNames Object.defineProperty Object.getOwnPropertyDescriptor Object.defineProperties Object.keys Object.preventExtensions / Object.isExtensible Object.seal / Object.isSealed Object.freeze / Object.isFrozen PS：只讲有什么，不讲是什么。 2.什么是 ES6? ECMAScript6 在保证向下兼容的前提下，提供大量新特性，目前浏览器兼容情况如下： ES6 特性如下： 块级作用域 关键字 let, 常量 const 对象字面量的属性赋值简写（property value shorthand） var obj = { // __proto__ __proto__: theProtoObj, // Shorthand for ‘handler: handler’ handler, // Method definitions toString() { // Super calls return &amp;#34;d &amp;#34; + super.toString(); }, // Computed (dynamic) property names [ &amp;#39;prop_&amp;#39; + (() =&amp;gt; 42)() ]: 42 }; 赋值解构 let singer = { first: &amp;#34;Bob&amp;#34;, last: &amp;#34;Dylan&amp;#34; }; let { first: f, last: l } = singer; // 相当于 f = &amp;#34;Bob&amp;#34;, l = &amp;#34;Dylan&amp;#34; let [all, year, month, day] = /^(\d\d\d\d)-(\d\d)-(\d\d)$/.exec(&amp;#34;2015-10-25&amp;#34;); let [x, y] = [1, 2, 3]; // x = 1, y = 2 函数参数 - 默认值、参数打包、数组展开（Default、Rest、Spread） //Default function findArtist(name=&amp;#39;lu&amp;#39;, age=&amp;#39;26&amp;#39;) { ... } //Rest function f(x, ...y) { // y is an Array return x * y.length; } f(3, &amp;#34;hello&amp;#34;, true) == 6 //Spread function f(x, y, z) { return x + y + z; } // Pass each elem of array as argument f(...[1,2,3]) == 6 箭头函数 Arrow functions (1) 简化了代码形式，默认 return 表达式结果。 (2) 自动绑定语义 this，即定义函数时的 this。如上面例子中，forEach 的匿名函数参数中用到的 this。 6.字符串模板 Template strings var name = &amp;#34;Bob&amp;#34;, time = &amp;#34;today&amp;#34;; `Hello ${name}, how are you ${time}?` // return &amp;#34;Hello Bob, how are you today?&amp;#34; Iterators（迭代器）+ for..of 迭代器有个 next 方法，调用会返回： (1) 返回迭代对象的一个元素：{ done: false, value: elem } (2) 如果已到迭代对象的末端：{ done: true, value: retVal } for (var n of [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) { console.log(n); } // 打印a、b、c 生成器（Generators） Class Class，有 constructor、extends、super，但本质上是语法糖（对语言的功能并没有影响，但是更方便程序员使用）。 class Artist { constructor(name) { this.name = name; } perform() { return this.name + &amp;#34; performs &amp;#34;; } } class Singer extends Artist { constructor(name, song) { super.constructor(name); this.song = song; } perform() { return super.perform() + &amp;#34;[&amp;#34; + this.song + &amp;#34;]&amp;#34;; } } let james = new Singer(&amp;#34;Etta James&amp;#34;, &amp;#34;At last&amp;#34;); james instanceof Artist; // true james instanceof Singer; // true james.perform(); // &amp;#34;Etta James performs [At last]&amp;#34; Modules ES6 的内置模块功能借鉴了 CommonJS 和 AMD 各自的优点： (1) 具有 CommonJS 的精简语法、唯一导出出口 (single exports) 和循环依赖 (cyclic dependencies) 的特点。 (2) 类似 AMD，支持异步加载和可配置的模块加载。 // lib/math.js export function sum(x, y) { return x + y; } export var pi = 3.141593; // app.js import * as math from &amp;#34;lib/math&amp;#34;; alert(&amp;#34;2π = &amp;#34; + math.sum(math.pi, math.pi)); // otherApp.js import {sum, pi} from &amp;#34;lib/math&amp;#34;; alert(&amp;#34;2π = &amp;#34; + sum(pi, pi)); Module Loaders: // Dynamic loading – ‘System’ is default loader System.import(&amp;#39;lib/math&amp;#39;).then(function(m) { alert(&amp;#34;2π = &amp;#34; + m.sum(m.pi, m.pi)); }); // Directly manipulate module cache System.get(&amp;#39;jquery&amp;#39;); System.set(&amp;#39;jquery&amp;#39;, Module({$: $})); // WARNING: not yet finalized Map + Set + WeakMap + WeakSet 四种集合类型，WeakMap、WeakSet 作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉。 // Sets var s = new Set(); s.add(&amp;#34;hello&amp;#34;).add(&amp;#34;goodbye&amp;#34;).add(&amp;#34;hello&amp;#34;); s.size === 2; s.has(&amp;#34;hello&amp;#34;) === true; // Maps var m = new Map(); m.set(&amp;#34;hello&amp;#34;, 42); m.set(s, 34); m.get(s) == 34; //WeakMap var wm = new WeakMap(); wm.set(s, { extra: 42 }); wm.size === undefined // Weak Sets var ws = new WeakSet(); ws.add({ data: 42 });//Because the added object has no other references, it will not be held in the set Math + Number + String + Array + Object APIs 一些新的 API Number.EPSILON Number.isInteger(Infinity) // false Number.isNaN(&amp;#34;NaN&amp;#34;) // false Math.acosh(3) // 1.762747174039086 Math.hypot(3, 4) // 5 Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2 &amp;#34;abcde&amp;#34;.includes(&amp;#34;cd&amp;#34;) // true &amp;#34;abc&amp;#34;.repeat(3) // &amp;#34;abcabcabc&amp;#34; Array.from(document.querySelectorAll(&amp;#39;*&amp;#39;)) // Returns a real Array Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior [0, 0, 0].fill(7, 1) // [0,7,7] [1, 2, 3].find(x =&amp;gt; x == 3) // 3 [1, 2, 3].findIndex(x =&amp;gt; x == 2) // 1 [1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2] [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;].entries() // iterator [0, &amp;#34;a&amp;#34;], [1,&amp;#34;b&amp;#34;], [2,&amp;#34;c&amp;#34;] [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;].keys() // iterator 0, 1, 2 [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;].values() // iterator &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; Object.assign(Point, { origin: new Point(0,0) }) Proxies 使用代理（Proxy）监听对象的操作，然后可以做一些相应事情。 var target = {}; var handler = { get: function (receiver, name) { return `Hello, ${name}!`; } }; var p = new Proxy(target, handler); p.world === &amp;#39;Hello, world!&amp;#39;; 可监听的操作：get、set、has、deleteProperty、apply、construct、getOwnPropertyDescriptor、defineProperty、getPrototypeOf、setPrototypeOf、enumerate、ownKeys、preventExtensions、isExtensible。 Symbols Symbol 是一种基本类型。Symbol 通过调用 symbol 函数产生，它接收一个可选的名字参数，该函数返回的 symbol 是唯一的。 var key = Symbol(&amp;#34;key&amp;#34;); var key2 = Symbol(&amp;#34;key&amp;#34;); key == key2 //false Promises Promises 是处理异步操作的对象，使用了 Promise 对象之后可以用一种链式调用的方式来组织代码，让代码更加直观（类似 jQuery 的 deferred 对象）。 function fakeAjax(url) { return new Promise(function (resolve, reject) { // setTimeouts are for effect, typically we would handle XHR if (!url) { return setTimeout(reject, 1000); } return setTimeout(resolve, 1000); }); } // no url, promise rejected fakeAjax().then(function () { console.log(&amp;#39;success&amp;#39;); },function () { console.log(&amp;#39;fail&amp;#39;); });</description>
    </item>
  </channel>
</rss>
